import streamlit as st
import pandas as pd
import os
from datetime import datetime

st.set_page_config(layout="centered")
st.title("📅 مراحل إنجاز المشروع")

DATA_PATH = "data/project_stages.csv"
os.makedirs("data", exist_ok=True)

# بيانات المراحل الثابتة (لا يمكن تعديلها من المستخدم)
STAGES_INFO = [
    {"رقم المرحلة": "المرحلة الأولى", "اسم المرحلة": "التحضير والتخطيط", "الوصف": "تحديد الأرض، استخراج التراخيص، التصميم الهندسي والمعماري", "المهام": "- رفع المساحة- استخراج رخصة البناء- تصميم مخططات"},
    {"رقم المرحلة": "المرحلة الثانية", "اسم المرحلة": "الحفر والأساسات", "الوصف": "أعمال الحفر وصب القواعد والأساسات", "المهام": "- أعمال الحفر- صب القواعد- العزل الأرضي"},
    {"رقم المرحلة": "المرحلة الثالثة", "اسم المرحلة": "الهيكل الإنشائي (الخرسانة)", "الوصف": "صب الأعمدة والأسقف والجدران الحاملة", "المهام": "- صب الأعمدة- صب السقف الأول- بناء الجدران"},
    {"رقم المرحلة": "المرحلة الرابعة", "اسم المرحلة": "البناء بالطوب والبلوك", "الوصف": "إغلاق الهيكل بالجدران الداخلية والخارجية", "المهام": "- بناء الحوائط- تجهيز الفتحات للنوافذ والأبواب"},
    {"رقم المرحلة": "المرحلة الخامسة", "اسم المرحلة": "التمديدات الأولية", "الوصف": "كهرباء وسباكة وتكييف قبل التشطيبات", "المهام": "- تمديد كهرباء- تمديد صرف صحي ومياه- تكييف"},
    {"رقم المرحلة": "المرحلة السادسة", "اسم المرحلة": "التشطيبات الخارجية", "الوصف": "واجهات، عزل، دهان خارجي، بوابات", "المهام": "- دهان الواجهات- تركيب الإنارة الخارجية"},
    {"رقم المرحلة": "المرحلة السابعة", "اسم المرحلة": "الاختبارات والتسليم", "الوصف": "فحص الأنظمة، التأكد من الجاهزية، إعداد تقرير التسليم", "المهام": "- فحص الكهرباء- فحص المياه- تنظيف وتسليم"},
]

# دالة تحميل البيانات المخزنة مسبقاً
def load_stages_data():
    if os.path.exists(DATA_PATH):
        df = pd.read_csv(DATA_PATH, parse_dates=["تاريخ البدء", "تاريخ النهاية"])
        return df
    else:
        # بناء إطار بيانات جديد مع الأعمدة المطلوبة
        df = pd.DataFrame(STAGES_INFO)
        df["تاريخ البدء"] = pd.NaT
        df["تاريخ النهاية"] = pd.NaT
        df["المدة الزمنية (أيام)"] = 0
        return df

# دالة حفظ البيانات
def save_stages_data(df):
    df.to_csv(DATA_PATH, index=False, encoding="utf-8")

# تحميل البيانات
df_stages = load_stages_data()

st.markdown("يرجى إدخال **تاريخ البدء** و**تاريخ النهاية** لكل مرحلة، وسيتم حساب **المدة الزمنية** تلقائياً.")

# تحديث البيانات من إدخالات المستخدم
for idx, row in df_stages.iterrows():
    st.markdown(f"### {row['رقم المرحلة']} - {row['اسم المرحلة']}")
    cols = st.columns(3)
    with cols[0]:
        start_date = st.date_input(
            "تاريخ البدء", 
            value=row["تاريخ البدء"] if pd.notnull(row["تاريخ البدء"]) else None, 
            key=f"start_{idx}"
        )
    with cols[1]:
        end_date = st.date_input(
            "تاريخ النهاية", 
            value=row["تاريخ النهاية"] if pd.notnull(row["تاريخ النهاية"]) else None, 
            key=f"end_{idx}"
        )
    # حساب المدة الزمنية (باليوم) فقط إذا التاريخين موجودين
    duration = 0
    if start_date and end_date and end_date >= start_date:
        duration = (end_date - start_date).days + 1  # +1 ليشمل اليوم الأول
    with cols[2]:
        st.text(f"المدة الزمنية (أيام): {duration}")

    # تحديث الإطار بالبيانات الجديدة
    df_stages.at[idx, "تاريخ البدء"] = pd.to_datetime(start_date)
    df_stages.at[idx, "تاريخ النهاية"] = pd.to_datetime(end_date)
    df_stages.at[idx, "المدة الزمنية (أيام)"] = duration

# زر الحفظ
if st.button("💾 حفظ البيانات"):
    save_stages_data(df_stages)
    st.success("تم حفظ البيانات بنجاح!")

# عرض الجدول النهائي
st.markdown("### 📊 الجدول الحالي لمراحل المشروع")
st.dataframe(df_stages.style.format({
    "تاريخ البدء": lambda d: d.strftime("%Y-%m-%d") if pd.notnull(d) else "",
    "تاريخ النهاية": lambda d: d.strftime("%Y-%m-%d") if pd.notnull(d) else "",
    "المدة الزمنية (أيام)": "{:.0f}"
}))
